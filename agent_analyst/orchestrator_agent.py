# agent_analyst/orchestrator_agent.py

from dataclasses import dataclass
from pydantic_ai import Agent, RunContext, ModelRetry
import pandas as pd
from pathlib import Path
import zipfile
import nest_asyncio

nest_asyncio.apply()


@dataclass
class QueryDeps:
    """Depend√™ncias para o agente de consulta, contendo o DataFrame final."""
    df: pd.DataFrame


class OrchestratorAgent:
    """
    Um agente orquestrador que usa c√≥digo determin√≠stico para tarefas de prepara√ß√£o
    e um agente LLM interno para a an√°lise de dados inteligente.
    """

    def __init__(self, model_name: str = 'groq:gemma2-9b-it'):
        self.data_path = Path("data")
        self.df_completo = None

        # Este √© o agente LLM interno, focado APENAS em consultar o DataFrame.
        # Seu prompt √© simples e direto, tornando-o muito mais confi√°vel.
        self.query_agent = Agent(
            model=model_name,
            system_prompt="""
            Voc√™ √© um especialista em an√°lise de dados com pandas.
            Voc√™ tem acesso a um DataFrame chamado 'df'.
            Sua tarefa √© escrever e executar uma √∫nica linha de c√≥digo pandas para responder √† pergunta do usu√°rio.
            Responda de forma concisa com o resultado e o c√≥digo que voc√™ usou.
            Use os nomes exatos das colunas. Colunas com espa√ßos devem estar entre aspas, ex: df['NOME DA COLUNA'].
            Colunas dispon√≠veis: ['CHAVE DE ACESSO', 'MODELO', 'S√âRIE', 'N√öMERO', 'NATUREZA DA OPERA√á√ÉO', 'DATA EMISS√ÉO_CAB', 'EVENTO MAIS RECENTE', 'DATA/HORA EVENTO MAIS RECENTE', 'CPF/CNPJ Emitente', 'RAZ√ÉO SOCIAL EMITENTE', 'INSCRI√á√ÉO ESTADUAL EMITENTE', 'UF EMITENTE', 'MUNIC√çPIO EMITENTE', 'CNPJ DESTINAT√ÅRIO', 'NOME DESTINAT√ÅRIO', 'UF DESTINAT√ÅRIO', 'INDICADOR IE DESTINAT√ÅRIO', 'DESTINO DA OPERA√á√ÉO', 'CONSUMIDOR FINAL', 'PRESEN√áA DO COMPRADOR', 'VALOR NOTA FISCAL', 'MODELO_ITEM', 'S√âRIE_ITEM', 'N√öMERO_ITEM', 'NATUREZA DA OPERA√á√ÉO_ITEM', 'DATA EMISS√ÉO_ITEM', 'CPF/CNPJ Emitente_ITEM', 'RAZ√ÉO SOCIAL EMITENTE_ITEM', 'INSCRI√á√ÉO ESTADUAL EMITENTE_ITEM', 'UF EMITENTE_ITEM', 'MUNIC√çPIO EMITENTE_ITEM', 'CNPJ DESTINAT√ÅRIO_ITEM', 'NOME DESTINAT√ÅRIO_ITEM', 'UF DESTINAT√ÅRIO_ITEM', 'INDICADOR IE DESTINAT√ÅRIO_ITEM', 'DESTINO DA OPERA√á√ÉO_ITEM', 'CONSUMIDOR FINAL_ITEM', 'PRESEN√áA DO COMPRADOR_ITEM', 'N√öMERO PRODUTO', 'DESCRI√á√ÉO DO PRODUTO/SERVI√áO', 'C√ìDIGO NCM/SH', 'NCM/SH (TIPO DE PRODUTO)', 'CFOP', 'QUANTIDADE', 'UNIDADE', 'VALOR UNIT√ÅRIO', 'VALOR TOTAL']
            """,
            deps_type=QueryDeps,
            retries=3
        )
        self.query_agent.tool(self.safe_df_query)

    @staticmethod
    def safe_df_query(ctx: RunContext[QueryDeps], query: str) -> str:
        """Executa consultas pandas de forma segura no DataFrame fornecido."""
        try:
            print(f"ü§ñ Agente de consulta executando: {query}")
            df = ctx.deps.df
            # Dicion√°rio seguro para eval
            safe_dict = {'df': df, 'pd': pd}
            result = eval(query, {'__builtins__': {}}, safe_dict)
            return f"Resultado: {str(result)}"
        except Exception as e:
            error_msg = f"Erro na consulta: {str(e)}. Verifique a sintaxe e os nomes das colunas."
            raise ModelRetry(error_msg) from e

    def _prepare_data(self, zip_filename: str, cabecalho_filename: str, itens_filename: str):
        """Etapa determin√≠stica: descompacta e carrega os dados."""
        print("--- Iniciando Etapa de Prepara√ß√£o de Dados (Determin√≠stica) ---")

        # 1. Descompactar
        zip_path = self.data_path / zip_filename
        path_cabecalho = self.data_path / cabecalho_filename

        if not path_cabecalho.exists():
            if not zip_path.exists():
                raise FileNotFoundError(f"Arquivo ZIP '{zip_path}' n√£o encontrado.")
            print(f"üìÑ Descompactando '{zip_path}'...")
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(self.data_path)
            print("‚úÖ Arquivos descompactados.")
        else:
            print("üëç Arquivos CSV j√° existem. Pulando descompacta√ß√£o.")

        # 2. Carregar e Mesclar
        print("üîÑ Carregando e mesclando arquivos CSV...")
        df_cabecalho = pd.read_csv(path_cabecalho, sep=',', decimal='.', parse_dates=['DATA EMISS√ÉO'], dayfirst=False)
        df_itens = pd.read_csv(self.data_path / itens_filename, sep=',', decimal='.', parse_dates=['DATA EMISS√ÉO'],
                               dayfirst=False)

        df_cabecalho['VALOR NOTA FISCAL'] = pd.to_numeric(df_cabecalho['VALOR NOTA FISCAL'], errors='coerce')
        df_itens['QUANTIDADE'] = pd.to_numeric(df_itens['QUANTIDADE'], errors='coerce')
        df_cabecalho.dropna(subset=['CHAVE DE ACESSO', 'VALOR NOTA FISCAL'], inplace=True)
        df_itens.dropna(subset=['CHAVE DE ACESSO', 'QUANTIDADE'], inplace=True)

        self.df_completo = pd.merge(df_cabecalho, df_itens, on='CHAVE DE ACESSO', how='left',
                                    suffixes=('_CAB', '_ITEM'))
        print(f"‚úÖ Dados preparados. DataFrame final com {self.df_completo.shape[0]} linhas.")
        print("--- Fim da Etapa de Prepara√ß√£o ---")

    def run_task(self, question: str) -> str:
        """
        Executa a tarefa completa: prepara os dados e depois usa o agente LLM para responder a uma pergunta.
        """
        # Etapa 1: Preparar os dados de forma robusta
        self._prepare_data(
            zip_filename="202401_NFs.zip",
            cabecalho_filename="202401_NFs_Cabecalho.csv",
            itens_filename="202401_NFs_Itens.csv"
        )

        if self.df_completo is None:
            return "Erro: Falha ao carregar os dados. N√£o √© poss√≠vel continuar."

        # Etapa 2: Usar o agente LLM para a tarefa inteligente
        print("\n--- Iniciando Etapa de An√°lise (Agente LLM) ---")
        print(f"‚ùì Pergunta enviada ao agente: {question}")

        try:
            deps = QueryDeps(df=self.df_completo)
            response = self.query_agent.run_sync(question, deps=deps)
            final_answer = response.new_messages()[-1].parts[0].content
            print("--- Fim da Etapa de An√°lise ---")
            return final_answer
        except Exception as e:
            return f"‚ùå Erro durante a execu√ß√£o do agente de consulta: {str(e)}"